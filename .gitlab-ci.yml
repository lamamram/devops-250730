# image docker du pipeline (pour chaque job) par défaut
image: python:3.13-slim-bookworm

# étapes du pipeline à exécuter dans l'ordre
stages:
  - buiding
  - testing
  - qualifying

# variable d'environnement custom
variables:
  TRIGGER_CACHE: "off"

generate_deps:
  stage: buiding
  tags:
    - formation
  script:
    - python3 -m venv v_env
    - source ./v_env/bin/activate
    - pip3 install -r app/requirements.txt
    - pip3 install -r app/requirements-dev.txt
  # cacher le dossier v_env pour les jobs suivants
  cache:
    key: pip_deps
    paths:
      - v_env
    untracked: true
    policy: push
  # on exécute ce job uniquement si le fichier requirements.txt a été modifié
  rules:
    - changes:
        - app/requirements*.txt
      when: on_success
    - if: $TRIGGER_CACHE == "on"


# nom arbitraire d'un job
test:
  stage: testing
  # association entre un job et un/des runner(s)
  tags:
    - formation
  before_script:
    - source v_env/bin/activate
  # script à exécuter
  script:
    - cd app
    # ">" convertit les saut de ligne en espace
    - >
      pytest -v -m "not e2e" 
      --junit-xml=./units.xml
  # utilisation du cache
  cache:
    key: pip_deps
    untracked: true
    policy: pull
  # tout fichier ou dossier créé généré au cours de l'exécution du job
  # à faire remonter dans l'interface Gitlab OU en téléchargement
  artifacts:
    access: developer
    expire_in: "1 hour"
    # téléchargement et ajout aux jobs suivants
    paths:
      - app/units.xml
    # rapports spéciaux avec des formats spécifiques attendus par Gitlab
    # interpétés par la GUI gitlab
    reports:
      junit:
        - app/units.xml
      

quality:
  stage: qualifying
  tags:
    - formation
  script:
    - sleep 10
    - echo "QUALITY"